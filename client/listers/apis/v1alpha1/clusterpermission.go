/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "open-cluster-management.io/cluster-permission/apis/v1alpha1"
)

// ClusterPermissionLister helps list ClusterPermissions.
// All objects returned here must be treated as read-only.
type ClusterPermissionLister interface {
	// List lists all ClusterPermissions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterPermission, err error)
	// ClusterPermissions returns an object that can list and get ClusterPermissions.
	ClusterPermissions(namespace string) ClusterPermissionNamespaceLister
	ClusterPermissionListerExpansion
}

// clusterPermissionLister implements the ClusterPermissionLister interface.
type clusterPermissionLister struct {
	indexer cache.Indexer
}

// NewClusterPermissionLister returns a new ClusterPermissionLister.
func NewClusterPermissionLister(indexer cache.Indexer) ClusterPermissionLister {
	return &clusterPermissionLister{indexer: indexer}
}

// List lists all ClusterPermissions in the indexer.
func (s *clusterPermissionLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterPermission, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterPermission))
	})
	return ret, err
}

// ClusterPermissions returns an object that can list and get ClusterPermissions.
func (s *clusterPermissionLister) ClusterPermissions(namespace string) ClusterPermissionNamespaceLister {
	return clusterPermissionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterPermissionNamespaceLister helps list and get ClusterPermissions.
// All objects returned here must be treated as read-only.
type ClusterPermissionNamespaceLister interface {
	// List lists all ClusterPermissions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterPermission, err error)
	// Get retrieves the ClusterPermission from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterPermission, error)
	ClusterPermissionNamespaceListerExpansion
}

// clusterPermissionNamespaceLister implements the ClusterPermissionNamespaceLister
// interface.
type clusterPermissionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterPermissions in the indexer for a given namespace.
func (s clusterPermissionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterPermission, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterPermission))
	})
	return ret, err
}

// Get retrieves the ClusterPermission from the indexer for a given namespace and name.
func (s clusterPermissionNamespaceLister) Get(name string) (*v1alpha1.ClusterPermission, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterpermission"), name)
	}
	return obj.(*v1alpha1.ClusterPermission), nil
}
